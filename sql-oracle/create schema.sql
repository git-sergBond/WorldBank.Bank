CREATE TABLE client (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(50) not null,
    second_name VARCHAR(50) not null,
    last_name VARCHAR(50) not null,
    password VARCHAR(256) not null,
    birthday timestamp not null,
    address varchar(100) not null,
    mobile_plone varchar(12) not null,
    email varchar(320),
    primary key (id)
);
create index idx_client_full_name on client (first_name, second_name, last_name);
create index idx_client_birthday on client (birthday);

CREATE TABLE account (
  id number generated by default as identity,
  client_id number not null,
  account number not null,
  date_open timestamp not null,
  date_close timestamp,
  foreign key (client_id) references client(id),
  primary key (id)
);
create index idx_account_account on account (account);

create table balance (
    id number generated by default as identity,
    account_id number not null,
    balance_ruble decimal not null,
    balance_dollar decimal not null,
    balance_euro decimal not null,
    foreign key (account_id) references account (id),
    primary key (id)
);
create index idx_balance_account_id on balance(account_id);

create table payment_request (
  id number generated by default as identity,
  client_id number not null,
  account_from_id number not null,
  account_to_id number not null,
  amount decimal not null,
  request_date timestamp not null,
  payment_template_id number not null,
  foreign key (client_id) references client (id),
  foreign key (account_from_id) references account (id),
  foreign key (account_to_id) references account (id),
  primary key (id)
);
create index idx_payment_request_client_id on payment_request(client_id);

 create table payment_template (
  id number generated by default as identity,
  client_id number not null,
  account_from_id number not null,
  account_to_id number not null,
  amount decimal not null,
  other_params_json clob,
  foreign key (client_id) references client (id),
  foreign key (account_from_id) references account (id),
  foreign key (account_to_id) references account (id),
  primary key (id)
);
create index idx_payment_template_client_id on payment_template(client_id);

alter table payment_request add foreign key (payment_template_id) references payment_template (id);

create table payment_status (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    previous_payment_status_id number not null,
    payment_request_id number not null,
    account_from_id number not null,
    account_to_id number not null,
    amount decimal not null,
    state number not null,
    transaction_id number,
    date_change_status timestamp not null,
    primary key (id)
);

alter table payment_status add foreign key (payment_request_id) references payment_status (id);
alter table payment_status add foreign key (account_from_id) references account (id);
alter table payment_status add foreign key (account_to_id) references account (id);

create index idx_payment_status_payment_request_id on payment_status(payment_request_id);
create index idx_payment_status_account_from_id on payment_status(account_from_id);

create table transaction (
  id number generated by default as identity,
  account_from_id number not null,
  account_to_id number not null,
  amount decimal not null,
  is_applied number(1) not null,
  date_apply timestamp not null,
  is_rollback number(1) not null,
  date_rollback timestamp not null,
  is_have_error number(1) not null,
  date_error timestamp not null,
  foreign key (account_from_id) references account (id),
  foreign key (account_to_id) references account (id),
  primary key (id)
);

alter table payment_status add foreign key (transaction_id) references transaction (id);

create table audit_payment_status (
    id number generated by default as identity,
    payment_status_id number not null,
    date_event timestamp not null,
    type_id number not null,
    message varchar(300),
    foreign key (payment_status_id) references payment_status (id),
    primary key (id)
)